{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"ABC/","text":"Automatic Break Control (ABC) systems \u00b6 There are a number of technologiess (none of them part of the DCC standard), that provide a mechanism to signal a decoder to automatically stop. This enables the layout to prevent a train going through a red signal. To enable this feature you need to have a compatible decode and track circuitry to enable this feature. Some features are manufacturer specific (where there is no published data how the feature works) so you need to source the DCC controller and power booster/block detection hardware from the same manufacturer and install a decoder that supports the features. It is primarily European manufacturers that provide these features: Zimo has HLU which is a multi-phase stopping solution which provides a more realistic controlled stop as a train moves through the multiple signal aspects protecting an occupied block Lenz has a system that allows a 2 phase breaking (slow down then stop) There is a cruder ABC system that provides an emergancy stop function, where diodes can be used to provide an asymmetric track DCC signal in an isolated section of the track. When an decoder which supports the feature detects to asymmetric signal it will come to a stop. There is a configuration variable to determine how long the train will take to stop.","title":"Automated Breaking"},{"location":"ABC/#automatic-break-control-abc-systems","text":"There are a number of technologiess (none of them part of the DCC standard), that provide a mechanism to signal a decoder to automatically stop. This enables the layout to prevent a train going through a red signal. To enable this feature you need to have a compatible decode and track circuitry to enable this feature. Some features are manufacturer specific (where there is no published data how the feature works) so you need to source the DCC controller and power booster/block detection hardware from the same manufacturer and install a decoder that supports the features. It is primarily European manufacturers that provide these features: Zimo has HLU which is a multi-phase stopping solution which provides a more realistic controlled stop as a train moves through the multiple signal aspects protecting an occupied block Lenz has a system that allows a 2 phase breaking (slow down then stop) There is a cruder ABC system that provides an emergancy stop function, where diodes can be used to provide an asymmetric track DCC signal in an isolated section of the track. When an decoder which supports the feature detects to asymmetric signal it will come to a stop. There is a configuration variable to determine how long the train will take to stop.","title":"Automatic Break Control (ABC) systems"},{"location":"DCC/","text":"Digital Command Control (DCC) \u00b6 DCC provides a way for a controller to communicate with individual components of a railway system over the rail tracks. A digital signal running at 8KHz is encoded in the power provided to the tracks. Each locomotive and some additional control modules have a decoder which can read the digital signal from the tracks to receive the digital signal. Each decode must be assigned a unique address within a layout. The addresses default to ID 3 at manufacture, so must be configured when being introduced to a new layout. Using DCC overcomes many of the limitations of analog control, as the entire track can now be powered all the time and multiple vehicles can the be independently controlled on the same track. The digital signal also allows control of specific features, so lighting and sounds on board a locomotive can be controlled. It also means that signals and points can also be controlled from the controller, using additional controller boards with on board DCC decoders. The train speed and direction is no longer controlled by the power being supplied to the track, as in analog systems, often referred to as DC systems. The track power remains at a constant level and instructions sent to the decoders on board a locomotive control the motors, hence the speed and direction. DCC only works in one direction, the controller sends signals onto the track. The controller cannot receive any data from the decoders on the track via DCC. However, there is an extension to the DCC standard which does allow decoders to write a small amount of data to the track for, this is not widely adopted my commercial systems and some commercial systems have competing extensions, which are not part of the DCC standard to provide this data back channel. To be able to read the data from a decoder there usually needs to be additional hardware installed on the layout. This topic is discussed further in the Block Detection section. To receive feedback from sensors around the layout, DCC is not used. There is a complementary NMRA standard called Layout Command Control (LCC) . Useful websites \u00b6 DCCWiki Open source projects \u00b6 DCC++ : The implementation of a DCC controller based on an Arduino with the motor shield installed. Original project seems to have been abandoned but there is activity on DCC++ Ex , but this new project seems to be expanding scope beyond that of the original DCC++ project. Git repositories Original project : DCC++ DCC++ EX","title":"DCC"},{"location":"DCC/#digital-command-control-dcc","text":"DCC provides a way for a controller to communicate with individual components of a railway system over the rail tracks. A digital signal running at 8KHz is encoded in the power provided to the tracks. Each locomotive and some additional control modules have a decoder which can read the digital signal from the tracks to receive the digital signal. Each decode must be assigned a unique address within a layout. The addresses default to ID 3 at manufacture, so must be configured when being introduced to a new layout. Using DCC overcomes many of the limitations of analog control, as the entire track can now be powered all the time and multiple vehicles can the be independently controlled on the same track. The digital signal also allows control of specific features, so lighting and sounds on board a locomotive can be controlled. It also means that signals and points can also be controlled from the controller, using additional controller boards with on board DCC decoders. The train speed and direction is no longer controlled by the power being supplied to the track, as in analog systems, often referred to as DC systems. The track power remains at a constant level and instructions sent to the decoders on board a locomotive control the motors, hence the speed and direction. DCC only works in one direction, the controller sends signals onto the track. The controller cannot receive any data from the decoders on the track via DCC. However, there is an extension to the DCC standard which does allow decoders to write a small amount of data to the track for, this is not widely adopted my commercial systems and some commercial systems have competing extensions, which are not part of the DCC standard to provide this data back channel. To be able to read the data from a decoder there usually needs to be additional hardware installed on the layout. This topic is discussed further in the Block Detection section. To receive feedback from sensors around the layout, DCC is not used. There is a complementary NMRA standard called Layout Command Control (LCC) .","title":"Digital Command Control (DCC)"},{"location":"DCC/#useful-websites","text":"DCCWiki","title":"Useful websites"},{"location":"DCC/#open-source-projects","text":"DCC++ : The implementation of a DCC controller based on an Arduino with the motor shield installed. Original project seems to have been abandoned but there is activity on DCC++ Ex , but this new project seems to be expanding scope beyond that of the original DCC++ project. Git repositories Original project : DCC++ DCC++ EX","title":"Open source projects"},{"location":"LCC/","text":"Layout Command Control (LCC) \u00b6 What is Layout command control \u00b6 DCC provides a standard way for a controller to control a train, by placing a digital signal along with power on the tacks. However, it does not provide a way for layout components, such as points, signals, turntables, crossings or various track sensing technologies to communicate. When you think of how signals work on rail systems round the world they require sensors to detect when trains are within a track section (a block) and then signals automatically protect trains as they move through blocks. As points are switched then the signals need to show the correct aspect, etc. This communication requires 2 way communication and require a number of components to cooperate, which is not provided within the DCC standard, hence the need for Layout control. Competing technology available \u00b6 There are a number of competing technologies in this space. NMRA adopted a standard in 2016, but many manufacturers and other groups already had their own mechanism of providing Layout Control LocoNet - Digitrax. This is licensed technology, though there is a personal specification released for non-commercial use. The technology has been licensed to a number of other companies XpressNet - Lenz (used by Atlas, Hornby, Lenz, OpenDCC (DIY), Paco Canada (DIY), Roco (some models), Viessmann and ZTC Controls) CBUS - MERG C/MRI There are other technologies available but not listed. It is unclear what the future will be as there a some very well established and supported technologies available that provide layout control and currently there is virtually no commercial support for the NMRA LCC standard. NMRA LCC Standard \u00b6 The NMRA Layout Command Control standards are based on the OpenLCB project. LCC provides a bus for nodes to communicate. This allows communication between multiple components controlling a layout. LCC complements DCC, it does not replace it, but an implementation may choose to move some component control, such as signals and points, from DCC to LCC. LCC uses CAN bus technology. CAN is an industry standard protocol, which is used across a number of industries. It provides an efficient mechanism for nodes on the bus to reliably communicate in potentially electrically noisy environments at high network utilisation, so is an ideal technology to use for layout control. Workshop/talks \u00b6 LCC - Build a layout clinic file to accompany video LCC talk Basics of LCC Open source projects \u00b6 OpenMRN OpenLCB unique ID range \u00b6 I have been assigned range 05 01 01 01 5A *","title":"LCC"},{"location":"LCC/#layout-command-control-lcc","text":"","title":"Layout Command Control (LCC)"},{"location":"LCC/#what-is-layout-command-control","text":"DCC provides a standard way for a controller to control a train, by placing a digital signal along with power on the tacks. However, it does not provide a way for layout components, such as points, signals, turntables, crossings or various track sensing technologies to communicate. When you think of how signals work on rail systems round the world they require sensors to detect when trains are within a track section (a block) and then signals automatically protect trains as they move through blocks. As points are switched then the signals need to show the correct aspect, etc. This communication requires 2 way communication and require a number of components to cooperate, which is not provided within the DCC standard, hence the need for Layout control.","title":"What is Layout command control"},{"location":"LCC/#competing-technology-available","text":"There are a number of competing technologies in this space. NMRA adopted a standard in 2016, but many manufacturers and other groups already had their own mechanism of providing Layout Control LocoNet - Digitrax. This is licensed technology, though there is a personal specification released for non-commercial use. The technology has been licensed to a number of other companies XpressNet - Lenz (used by Atlas, Hornby, Lenz, OpenDCC (DIY), Paco Canada (DIY), Roco (some models), Viessmann and ZTC Controls) CBUS - MERG C/MRI There are other technologies available but not listed. It is unclear what the future will be as there a some very well established and supported technologies available that provide layout control and currently there is virtually no commercial support for the NMRA LCC standard.","title":"Competing technology available"},{"location":"LCC/#nmra-lcc-standard","text":"The NMRA Layout Command Control standards are based on the OpenLCB project. LCC provides a bus for nodes to communicate. This allows communication between multiple components controlling a layout. LCC complements DCC, it does not replace it, but an implementation may choose to move some component control, such as signals and points, from DCC to LCC. LCC uses CAN bus technology. CAN is an industry standard protocol, which is used across a number of industries. It provides an efficient mechanism for nodes on the bus to reliably communicate in potentially electrically noisy environments at high network utilisation, so is an ideal technology to use for layout control.","title":"NMRA LCC Standard"},{"location":"LCC/#workshoptalks","text":"LCC - Build a layout clinic file to accompany video LCC talk Basics of LCC","title":"Workshop/talks"},{"location":"LCC/#open-source-projects","text":"OpenMRN","title":"Open source projects"},{"location":"LCC/#openlcb-unique-id-range","text":"I have been assigned range 05 01 01 01 5A *","title":"OpenLCB unique ID range"},{"location":"Standards-Bodies-and-Groups/","text":"Standard Bodies, Groups and Forums \u00b6 Standard Bodies \u00b6 NMRA - National Model Railroad Association - USA standards body MOROP - European Association of Modelrailroader and Railroad Friends - create the NEM standards ( N orms of the E uropean M odel railroad) 2FS - 2mm Scale Association - UK 2mm FineScale, 2mm:1ft scale = 1:152 with 9.42mm gauge Groups \u00b6 Open LCB - creators of LCC standard Model Electronic Railway Group (MERG) - creators of CBUS, an incompatible Layout Control Bus to the NMRA LCC standard BiDiB - a bus standard organisation, which doesn't appear to have gained much support. There is very limited recent activity Forums \u00b6 Trainboard - DCC++ 2020 update project thread RMweb - UK model rail forums","title":"Standards bodies"},{"location":"Standards-Bodies-and-Groups/#standard-bodies-groups-and-forums","text":"","title":"Standard Bodies, Groups and Forums"},{"location":"Standards-Bodies-and-Groups/#standard-bodies","text":"NMRA - National Model Railroad Association - USA standards body MOROP - European Association of Modelrailroader and Railroad Friends - create the NEM standards ( N orms of the E uropean M odel railroad) 2FS - 2mm Scale Association - UK 2mm FineScale, 2mm:1ft scale = 1:152 with 9.42mm gauge","title":"Standard Bodies"},{"location":"Standards-Bodies-and-Groups/#groups","text":"Open LCB - creators of LCC standard Model Electronic Railway Group (MERG) - creators of CBUS, an incompatible Layout Control Bus to the NMRA LCC standard BiDiB - a bus standard organisation, which doesn't appear to have gained much support. There is very limited recent activity","title":"Groups"},{"location":"Standards-Bodies-and-Groups/#forums","text":"Trainboard - DCC++ 2020 update project thread RMweb - UK model rail forums","title":"Forums"},{"location":"UKSuppliers/","text":"UK Suppliers \u00b6 Bournemouth Model Railway Centre, 329 Holdenhurst Road, Bournemouth, Dorset. BH8 8BT Coastal DCC - RR-CirKits supplier British Finescale - code 40 rail (bull head + flat bottom) Marcway Pointwork - code 40 BullHead rail + larger codes tgauge.com - T Gauge supplier GS Model Supplies - T Gauge supplier Osborn's Models - N and Z Gauge supplier","title":"UK Suppliers"},{"location":"UKSuppliers/#uk-suppliers","text":"Bournemouth Model Railway Centre, 329 Holdenhurst Road, Bournemouth, Dorset. BH8 8BT Coastal DCC - RR-CirKits supplier British Finescale - code 40 rail (bull head + flat bottom) Marcway Pointwork - code 40 BullHead rail + larger codes tgauge.com - T Gauge supplier GS Model Supplies - T Gauge supplier Osborn's Models - N and Z Gauge supplier","title":"UK Suppliers"},{"location":"blockDetection/","text":"Block Detection \u00b6 Block detection allows the presence of a train on a specific section of track to be automatically detected. There are a number of different technologies available, but the main options in use are: detect currect draw fron the track use opto sensors to identify rolling stock at a specific location The current draw allows the presence of rolling stock anywhere within a section of track (similar to block circuit on real railways) where as the opto-sensors provide information about when an exact position on track Sample Circuits \u00b6 Comparator Based DCC Current Sensing - see links at bottom of this page Decoder transmission to identify loco occupying block \u00b6 There is part of the DCC standard that allows a decoder to transmit a small amount of information. However, this needs to be supported in by the components providing power to the track and there needs to be sensors around the track that can read the data from decoders and publish it. Not all controllers or power boosters support the NMRA decoder transmission DCC standard and some manufacturers implement a proprietary, incompatible system, so if you want this feature you need to ensure that the controller/power boosters, loco decoders are compatible and there are modules installed on the layout that can read the decoder data from the track. Useful sites \u00b6 Current Sensing and Occupancy Detection for DCC Block Detection Current Sensing","title":"Block Detection"},{"location":"blockDetection/#block-detection","text":"Block detection allows the presence of a train on a specific section of track to be automatically detected. There are a number of different technologies available, but the main options in use are: detect currect draw fron the track use opto sensors to identify rolling stock at a specific location The current draw allows the presence of rolling stock anywhere within a section of track (similar to block circuit on real railways) where as the opto-sensors provide information about when an exact position on track","title":"Block Detection"},{"location":"blockDetection/#sample-circuits","text":"Comparator Based DCC Current Sensing - see links at bottom of this page","title":"Sample Circuits"},{"location":"blockDetection/#decoder-transmission-to-identify-loco-occupying-block","text":"There is part of the DCC standard that allows a decoder to transmit a small amount of information. However, this needs to be supported in by the components providing power to the track and there needs to be sensors around the track that can read the data from decoders and publish it. Not all controllers or power boosters support the NMRA decoder transmission DCC standard and some manufacturers implement a proprietary, incompatible system, so if you want this feature you need to ensure that the controller/power boosters, loco decoders are compatible and there are modules installed on the layout that can read the decoder data from the track.","title":"Decoder transmission to identify loco occupying block"},{"location":"blockDetection/#useful-sites","text":"Current Sensing and Occupancy Detection for DCC Block Detection Current Sensing","title":"Useful sites"},{"location":"home/","text":"Innes Rail \u00b6 This project contains the investigations of standards, technology, organisations and communities for model railroads. I plan to start my first build, but have been a little overwhelmed by the options and terminology thrown at someone new to the hobby. One of the goals of the railway I want to build to to have the layout fully automated, with computer control of trains, signals, points, etc. but also allowing me to control a train on the layout.","title":"Home"},{"location":"home/#innes-rail","text":"This project contains the investigations of standards, technology, organisations and communities for model railroads. I plan to start my first build, but have been a little overwhelmed by the options and terminology thrown at someone new to the hobby. One of the goals of the railway I want to build to to have the layout fully automated, with computer control of trains, signals, points, etc. but also allowing me to control a train on the layout.","title":"Innes Rail"},{"location":"raspi-can/","text":"Adding CAN to a Raspberry Pi \u00b6 The MCP2515 CAN controller chip uses SPI to communicate with the Raspberry Pi. To use: Ensure SPI is enabled in the Raspi-config interfaces utility sudo apt install can-utils -y Add the following to the bottom of /boot/config.txt file with command sudo nano /boot/config.txt dtoverlay = mcp2515-can0,oscillator = 16000000 ,interrupt = 25 dtoverlay = spi1-1cs Create the can0 interface by editing /etc/network/interfaces file sudo nano /etc/network/interfaces and add the following content auto can0 iface can0 inet manual pre-up /sbin/ip link set can0 type can bitrate 125000 up /sbin/ifconfig can0 up down /sbin/ifconfig can0 down reboot the pi To see the state of the CAN interface use commands ifconfig - should see the can0 interface as active ip -details -statistics link show can0 - shows statistics of interface candump can0 - shows raw data flowing on the bus If needed you can manually control the interface: start - ip link set can0 up type can bitrate 125000 stop - sudo ip link set can0 down","title":"Adding CAN to a Raspberry Pi"},{"location":"raspi-can/#adding-can-to-a-raspberry-pi","text":"The MCP2515 CAN controller chip uses SPI to communicate with the Raspberry Pi. To use: Ensure SPI is enabled in the Raspi-config interfaces utility sudo apt install can-utils -y Add the following to the bottom of /boot/config.txt file with command sudo nano /boot/config.txt dtoverlay = mcp2515-can0,oscillator = 16000000 ,interrupt = 25 dtoverlay = spi1-1cs Create the can0 interface by editing /etc/network/interfaces file sudo nano /etc/network/interfaces and add the following content auto can0 iface can0 inet manual pre-up /sbin/ip link set can0 type can bitrate 125000 up /sbin/ifconfig can0 up down /sbin/ifconfig can0 down reboot the pi To see the state of the CAN interface use commands ifconfig - should see the can0 interface as active ip -details -statistics link show can0 - shows statistics of interface candump can0 - shows raw data flowing on the bus If needed you can manually control the interface: start - ip link set can0 up type can bitrate 125000 stop - sudo ip link set can0 down","title":"Adding CAN to a Raspberry Pi"},{"location":"raspiSetup/","text":"Raspberry Pi setup \u00b6 A raspberry Pi will host JMRI and also the Arduino environment to program the arduino for DCC++. Prerequisites \u00b6 You need: a Raspberry Pi I am using a Raspberry Pi 4 Model B with 4 GB of memory, but you should be able to use a Raspberry Pi 3 Model B with 1GB memory or the Pi 4 with 1 or 2 GB memory. microSD card of at least 16GB Raspberry Pi power supply optionally a case for the Raspberry Pi - a Raspberry Pi 4 can run quite warm, so a heat sync case or a case that allows good airflow is recommended On your computer you need to install an application to be able to remotely control the Raspberry Pi and see the Raspbery Pi desktop. The best option is to install is RealVNC viewer Additional setup for Windows users \u00b6 Windows users will need the following software installed to be able to work with the Raspberry Pi: Bonjour Print Services putty Setup \u00b6 Download the latest raspbian image . I used the desktop version, but without the recommended software installed. unarchive the image flash the image to a micro SD card. There is a recommended application on the Raspberry Pi site, but I use belana etcher Once the image is flashed the SD card will be ejected from your system. You need to reinsert it and create an empty file called ssh in the boot partition. To do this open a command line window then cd into the boot partition directory on the sd card and enter the following command: touch ssh on mac and linux type NUL >> ssh on windows using command prompt echo $null >> ssh on windows using PowerShell Optionally, if you need to use WiFi rather than an ethernet connection create a file called wpa_supplicant.conf and ensure it has the following content ( modify the 2 letter country code, NETWORK_NAME and NETWORK_PASSWORD to match your location and WiFi you want to connect to ) ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=GB network={ ssid=\"NETWORK_NAME\" psk=\"NETOWRK_PASSWORD\" } Eject the microSD card from your computer and insert it into the Raspberry Pi Connect the Ethernet cable if needed and the power supply to the raspberry pi to power up the raspberry pi. On initial boot the raspberry pi will appear on the network using hostname raspberrypi.local. <TODO - add basic setup, initial loginm raspi config and update here> Add additional software using the command sudo apt install -y netatalk Download the JMRI software using command wget https://github.com/JMRI/JMRI/releases/download/v4.18/JMRI.4.18+R37ad3d0.tgz uncompress the downloaded file with command tar zxvf JMRI.4.18+R37ad3d0.tgz Move JMRI to the /opt directory and tidy up temporary files with command cd /opt && sudo cp -R ~/JMRI JMRI && rm -rf ~/JMRI && rm ~/JMRI.4.18+R37ad3d0.tgz Setup DCC++ \u00b6 Open a browser and navigate to https://www.arduino.cc/en/Main/Software . Download the Arduino IDE for Linux ARM 32 bits * expand the downloaded file with comand cd Downloads && tar zxvf arduino-1.8.12-linuxarm.tar.xz install arduino using command cd arduino-1.8.12 && sudo ./install.sh download DCC++ code using command cd ~ && git clone https://github.com/DccPlusPlus/BaseStation.git connect the arduino to the Raspberry Pi using a USB cable launch the Arduino IDE using a desktop connection over VNC. The application should be in the system menu under programming open the DCC++ application using File -> Open then navigate to the pi/BaseStation/DCCpp_Uno directory and open file DCCpp_Uno.ino set the correct board type, using menu Tools -> Board and select Arduino Uno or Arduino Mega or Mega 2560 , choosing the appropriate value for your Arduino board set the connection port, using menu Tools -> Board and select /dev/ttyACM0 or the port that indicates it has your board attached verify the processor is set correctly in menu Tools -> Processor (if using a Mega you can choose the original Mega or Mega 2560) press the upload button (arrow to right), which will compile and then upload the program to your Arduino board","title":"Raspberry Pi setup"},{"location":"raspiSetup/#raspberry-pi-setup","text":"A raspberry Pi will host JMRI and also the Arduino environment to program the arduino for DCC++.","title":"Raspberry Pi setup"},{"location":"raspiSetup/#prerequisites","text":"You need: a Raspberry Pi I am using a Raspberry Pi 4 Model B with 4 GB of memory, but you should be able to use a Raspberry Pi 3 Model B with 1GB memory or the Pi 4 with 1 or 2 GB memory. microSD card of at least 16GB Raspberry Pi power supply optionally a case for the Raspberry Pi - a Raspberry Pi 4 can run quite warm, so a heat sync case or a case that allows good airflow is recommended On your computer you need to install an application to be able to remotely control the Raspberry Pi and see the Raspbery Pi desktop. The best option is to install is RealVNC viewer","title":"Prerequisites"},{"location":"raspiSetup/#additional-setup-for-windows-users","text":"Windows users will need the following software installed to be able to work with the Raspberry Pi: Bonjour Print Services putty","title":"Additional setup for Windows users"},{"location":"raspiSetup/#setup","text":"Download the latest raspbian image . I used the desktop version, but without the recommended software installed. unarchive the image flash the image to a micro SD card. There is a recommended application on the Raspberry Pi site, but I use belana etcher Once the image is flashed the SD card will be ejected from your system. You need to reinsert it and create an empty file called ssh in the boot partition. To do this open a command line window then cd into the boot partition directory on the sd card and enter the following command: touch ssh on mac and linux type NUL >> ssh on windows using command prompt echo $null >> ssh on windows using PowerShell Optionally, if you need to use WiFi rather than an ethernet connection create a file called wpa_supplicant.conf and ensure it has the following content ( modify the 2 letter country code, NETWORK_NAME and NETWORK_PASSWORD to match your location and WiFi you want to connect to ) ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=GB network={ ssid=\"NETWORK_NAME\" psk=\"NETOWRK_PASSWORD\" } Eject the microSD card from your computer and insert it into the Raspberry Pi Connect the Ethernet cable if needed and the power supply to the raspberry pi to power up the raspberry pi. On initial boot the raspberry pi will appear on the network using hostname raspberrypi.local. <TODO - add basic setup, initial loginm raspi config and update here> Add additional software using the command sudo apt install -y netatalk Download the JMRI software using command wget https://github.com/JMRI/JMRI/releases/download/v4.18/JMRI.4.18+R37ad3d0.tgz uncompress the downloaded file with command tar zxvf JMRI.4.18+R37ad3d0.tgz Move JMRI to the /opt directory and tidy up temporary files with command cd /opt && sudo cp -R ~/JMRI JMRI && rm -rf ~/JMRI && rm ~/JMRI.4.18+R37ad3d0.tgz","title":"Setup"},{"location":"raspiSetup/#setup-dcc","text":"Open a browser and navigate to https://www.arduino.cc/en/Main/Software . Download the Arduino IDE for Linux ARM 32 bits * expand the downloaded file with comand cd Downloads && tar zxvf arduino-1.8.12-linuxarm.tar.xz install arduino using command cd arduino-1.8.12 && sudo ./install.sh download DCC++ code using command cd ~ && git clone https://github.com/DccPlusPlus/BaseStation.git connect the arduino to the Raspberry Pi using a USB cable launch the Arduino IDE using a desktop connection over VNC. The application should be in the system menu under programming open the DCC++ application using File -> Open then navigate to the pi/BaseStation/DCCpp_Uno directory and open file DCCpp_Uno.ino set the correct board type, using menu Tools -> Board and select Arduino Uno or Arduino Mega or Mega 2560 , choosing the appropriate value for your Arduino board set the connection port, using menu Tools -> Board and select /dev/ttyACM0 or the port that indicates it has your board attached verify the processor is set correctly in menu Tools -> Processor (if using a Mega you can choose the original Mega or Mega 2560) press the upload button (arrow to right), which will compile and then upload the program to your Arduino board","title":"Setup DCC++"},{"location":"usefulSites/","text":"Useful sites \u00b6 Historic Loading Gauges Technical railway information \u00b6 The Railway Technical Website NetworkRail - Signals explained unipartRail Signalling Handbook British Rail - Modern Signalling 1980 BR signalling 1989 NetworkRail - Controlling Trains DCC useful info and circuits","title":"Useful sites"},{"location":"usefulSites/#useful-sites","text":"Historic Loading Gauges","title":"Useful sites"},{"location":"usefulSites/#technical-railway-information","text":"The Railway Technical Website NetworkRail - Signals explained unipartRail Signalling Handbook British Rail - Modern Signalling 1980 BR signalling 1989 NetworkRail - Controlling Trains DCC useful info and circuits","title":"Technical railway information"}]}